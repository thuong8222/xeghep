import React, { useState } from 'react';
import { TextInput } from 'react-native';
import AppView from '../common/AppView';
import AppButton from '../common/AppButton';
import AppText from '../common/AppText';
import { ColorsGlobal } from '../base/Colors/ColorsGlobal';

export default function NoteInputSection() {
  const [note, setNote] = useState('');
  const [selectedNotes, setSelectedNotes] = useState<string[]>([]);
  const quickNotes = [
    'ƒê√≥n ƒë√∫ng gi·ªù',
    'Xe 7 ch·ªó',
    'Kh√¥ng ng·ªìi gh·∫ø cu·ªëi',
    'Th√¢n thi·ªán, h·ªó tr·ª£ h√†nh l√Ω',
    'Xe m·ªõi, s·∫°ch s·∫Ω',
  ];

  const handleAddNote = (item: string) => {
    const escaped = item.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // Escape k√Ω t·ª± ƒë·∫∑c bi·ªát trong regex

    if (selectedNotes.includes(item)) {
      // üßπ N·∫øu ƒë√£ ch·ªçn r·ªìi ‚Üí b·ªè ch·ªçn & x√≥a kh·ªèi input
      const updatedNotes = selectedNotes.filter(n => n !== item);
      setSelectedNotes(updatedNotes);

      // üß† Regex x·ª≠ l√Ω chu·∫©n m·ªçi v·ªã tr√≠ (ƒë·∫ßu / gi·ªØa / cu·ªëi)
      const regex = new RegExp(
        `(^${escaped}\\s*,\\s*|,\\s*${escaped}$|,\\s*${escaped}(?=,)|^${escaped}$)`,
        'g'
      );

      let updatedText = note.replace(regex, '').replace(/\s+,/g, ',').replace(/,\s+/g, ',');
      updatedText = updatedText.replace(/^,\s*|\s*,$/g, ''); // lo·∫°i b·ªè d·∫•u ph·∫©y th·ª´a ƒë·∫ßu/cu·ªëi
      setNote(updatedText.trim());
    } else {
      // ‚ûï N·∫øu ch∆∞a ch·ªçn ‚Üí th√™m v√†o
      setSelectedNotes(prev => [...prev, item]);
      const separator = note.trim().length > 0 ? ', ' : '';
      setNote(prev => prev + separator + item);
    }
  };

  return (
    <AppView
      borderTopWidth={1}
      paddingTop={18}
      borderTopColor={ColorsGlobal.borderColor}
      width="100%"
    >
      {/* Input ghi ch√∫ */}
      <AppView width="100%" alignItems="flex-start" justifyContent="flex-start">
        <TextInput
          value={note}
          onChangeText={setNote}
          placeholder="Ghi ch√∫: Nh·∫≠p ghi ch√∫...."
          multiline
          style={{
            width: '100%',
            minHeight: 80,
            textAlignVertical: 'top',
            borderWidth: 1,
            borderColor: ColorsGlobal.borderColor,
            borderRadius: 8,
            padding: 10,
            fontSize: 14,
            color: ColorsGlobal.textDark,
          }}
        />

        {/* G·ª£i √Ω ghi ch√∫ nhanh */}
        <AppView marginTop={18} row gap={8} flexWrap="wrap">
        {quickNotes.map((item, index) => {
            const isActive = selectedNotes.includes(item);
            return (
              <AppButton
                key={index}
                onPress={() => handleAddNote(item)}
                borderWidth={1}
                borderColor={
                  isActive ? ColorsGlobal.main : ColorsGlobal.borderColor
                }
                backgroundColor={
                  isActive ? ColorsGlobal.main + '15' : 'transparent'
                }
                paddingVertical={4}
                paddingHorizontal={12}
                radius={99}
              >
                <AppText
                  fontStyle="italic"
                  color={isActive ? ColorsGlobal.main : ColorsGlobal.textLight}
                  fontSize={14}
                >
                  {item}
                </AppText>
              </AppButton>
            );
          })}
        </AppView>
      </AppView>
    </AppView>
  );
}
